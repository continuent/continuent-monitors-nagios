#!/usr/bin/env ruby
# Copyright (C) 2014 Continuent, Inc.
# 
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License.  You may obtain
# a copy of the License at
# 
#         http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
# License for the specific language governing permissions and limitations
# under the License.
#
# Initial developer(s): Jeff Mace
# Contributor(s):

begin
  require 'rubygems'
  gem 'continuent-tools-core'
rescue LoadError
end

require 'continuent-tools-core'
require 'continuent-tools-nagios-monitor'

class ContinuentNagiosMonitorOnline
  include TungstenScript
  include TungstenNagiosMonitor
  private
  
  def main
    if TI.is_commercial?()
      unless TI.is_manager?()
        critical("The server is not a Continuent Tungsten Manager")
      end

      unless TI.is_running?("manager")
        critical("The Continuent Tungsten Manager is not running")
      end
    else
      unless TI.is_replicator?()
        critical("The server is not a Tungsten Replicator")
      end

      unless TI.is_running?("replicator")
        critical("The Tungsten Replicator is not running")
      end
    end
    
    opt_default(:service, TI.default_dataservice())
    if opt(:service) == nil
      critical("The --service option was not given")
    end
    
    not_online = []
    shunned = []
    
    status = TI.status(opt(:service))
    if status.is_replication?()
      # Replication Only
      status.replicators().each{
        |name|
        rep_status = status.replicator_status(name)

        if rep_status != "ONLINE"
          not_online << name
        end
      }
    elsif status.is_physical?()
      # Physical Dataservice
      status.replicators().each{
        |name|
        ds_status = status.datasource_status(name)
        rep_status = status.replicator_status(name)

        if opt(:skip_shunned) == true && ds_status == "SHUNNED"
          shunned << name
          next
        end
        
        if ds_status != "ONLINE" || rep_status != "ONLINE"
          not_online << name
        end
      }
    else
      # Composite Dataservices
      status.datasources().each{
        |name|
        ds_status = status.datasource_status(name)

        if opt(:skip_shunned) == true && ds_status == "SHUNNED"
          shunned << name
          next
        end
        
        if ds_status != "ONLINE"
          not_online << name
        end
      }
    end
    
    if not_online.size() > 0
      critical("#{not_online.join(', ')} #{TU.pluralize(not_online, "is", "are")} not ONLINE")
    end
    
    ok("All services are ONLINE")
  end
  
  def configure
    super()
    
    description("Check that all datasources or the local replication service are ONLINE.")
    
    add_option(:service, {
      :on => "--service String",
      :help => "The replication service or cluster to check"
    })
    
    add_option(:skip_shunned, {
      :on => "--skip-shunned String",
      :help => "Ignore Continuent Tungsten datasources that have been shunned.",
      :parse => method(:parse_boolean_option),
      :default => "false",
    })
  end
  
  def script_name
    "tungsten_nagios_online"
  end
  
  self.new().run()
end
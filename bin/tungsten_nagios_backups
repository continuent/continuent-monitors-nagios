#!/usr/bin/env ruby
# Copyright (C) 2014 Continuent, Inc.
# 
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License.  You may obtain
# a copy of the License at
# 
#         http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
# License for the specific language governing permissions and limitations
# under the License.
#
# Initial developer(s): Jeff Mace
# Contributor(s):

begin
  require 'rubygems'
  gem 'continuent-tools-core'
rescue LoadError
end

require 'continuent-tools-core'
require 'continuent-tools-nagios-monitor'

class CheckTungstenBackups
  include TungstenScript
  include TungstenNagiosMonitor
  private
  
  def main
    status = TI.status()
    unless status.coordinator() == TI.hostname()
      ok("Not running check because this node is not the coordinator")
    end
    seconds_since_epoch = TU.cmd_result("date +%s").to_i()
    most_recent_backup = nil
    
    status.datasources().each{
      |ds|
      begin
        TU.ssh_result("stat -c\"%n %Y\" #{TI.trepctl_property(status.name(), 'replicator.storage.agent.fs.directory')}/store*.properties 2>/dev/null", ds, TI.user()).split("\n").each{
          |line|
          stored_backup=line.split(" ")
          stored_backup[1] = stored_backup[1].to_i()
          
          if most_recent_backup == nil || stored_backup[1] > most_recent_backup[:seconds]
            most_recent_backup = {
              :hostname => ds,
              :filename => stored_backup[0],
              :seconds => stored_backup[1]
            }
          end
        }
      rescue CommandError
      end
    }
    
    if most_recent_backup == nil
      critical("Unable to find a backup on any datasource")
    end
    
    age = seconds_since_epoch-most_recent_backup[:seconds]
    if age > @options[:max_backup_age]
      critical("#{most_recent_backup[:hostname]}:#{most_recent_backup[:filename]} [#{age}s] is older than #{@options[:max_backup_age]}s")
    else
      ok("The most recent backup is #{most_recent_backup[:hostname]}:#{most_recent_backup[:filename]} [#{age}s]")
    end
  end
  
  def configure
    super()
    
    description("Check all local datasources to make sure one of them has a backup younger than the max allowed age")
    add_option(:max_backup_age, {
      :on => "--max-backup-age String",
      :help => "Maximum allowed age in seconds of a backup on any machine",
      :parse => method(:parse_integer_option),
      :default => 86400
    })
  end
  
  def script_name
    "tungsten_nagios_backups"
  end
  
  self.new().run()
end